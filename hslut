package hs;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;

import robocode.RobocodeFileOutputStream;

public class HsLUT2 implements CommonInterface {
	
	public double  lut[];
	int lutSize;
	
	public HsLUT2(int argNumInputs, int argVariableFloor[], int argVariableCeiling[]) {
		
		int tempSize = 1;
		for (int i = 0; i < argNumInputs; i++)
			tempSize = tempSize * (argVariableCeiling[i] - argVariableFloor[i]);
		
		lutSize = tempSize; 
		
		lut = new double[lutSize];
		initialiseLUT();
	}
	
	public HsLUT2(int argNumStates, int argNumActions, int argSizeStates[]){
		
		int tempSize = 1;
		for (int i = 0; i < argNumStates; i++)
			tempSize = tempSize * argSizeStates[i];

		lutSize = tempSize * argNumActions;

		lut = new double[lutSize];
		initialiseLUT();
	}
		
	/**
	* Initialise the look up table to all zeros.
	*/
	public void initialiseLUT(){
		for(int i =0; i < lut.length; i++ ){
			lut[i] = 0.5;
		}
	}
	
	double updateLUT(int[] previousStateAction, int[] currentStateAction, double r, double alpha, double gamma) {
		
		double prevVal = outputFor(previousStateAction);
		double currVal = outputFor(currentStateAction);
		double temp = prevVal + alpha * (r + gamma * currVal - prevVal);
		lut[indexFor(previousStateAction)] = temp;
		return Math.abs(prevVal - temp);
	}
	

	/**
	* A helper method that translates a vector being used to index the look up table
	* into an ordinal that can then be used to access the associated look up table element.
	* @param X The state action vector used to index the LUT
	* @return The index where this vector maps to
	*/
	public int indexFor(int [] X){
		 int hashVal = 0;
		 
		 for( int i = 0; i < X.length; i++)
		 	 hashVal = (int) (37 * hashVal + X[i]);

		  return Math.abs(hashVal % lutSize);
	}

	public double outputFor(int[] X) {
		//X is stateAction vector: 
		return lut[indexFor(X)];
	}

	public void save(PrintStream argFile) {		
		
		for(int i =0; i < lutSize; i++){	
			Double temp = lut[i];
        	argFile.print(temp);
        	argFile.print("\n");
		}
	}

	@Override
	public void load(String argFileName) throws IOException {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public double outputFor(double [] X){
		int k[] = new int[X.length];
		for(int i =0; i < X.length; i++ ){
			k[i] = (int)X[i];
		}
		return outputFor(k);
	}

	@Override
	public double train(double[] X, double argValue) {
		
		int k[] = new int[X.length];
		for(int i =0; i < X.length; i++ ){
			k[i] = (int)X[i];
		}
		
		int index = indexFor(k);
		
		double error = outputFor(X) - argValue;
		
		lut[index] = argValue;
		
		return error;
	}

	@Override
	public void save(File argFile) {
		PrintStream saveFile = null;
		try {
		    saveFile = new PrintStream(argFile.getName());
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		save(saveFile);
	}

}
